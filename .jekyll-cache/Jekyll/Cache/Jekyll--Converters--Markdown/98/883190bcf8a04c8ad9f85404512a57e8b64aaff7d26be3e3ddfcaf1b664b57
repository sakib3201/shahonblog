I"æ7<h2 id="loj---1083-histogram">LOJ - 1083: Histogram</h2>

<hr />

<p><strong>What The Problem Wants :</strong> The problem wants you to find the area of the largest rectangle in a <a href="https://en.wikipedia.org/wiki/Histogram">histogram</a> . These rectangles have to be contained within the histogram and might cover multiple bars partially.</p>

<p><strong>Approach to the Solution :</strong> There is two important observation for this problem:</p>

<ol>
  <li>Any rectangle in the histogram will have a height (might be zero)</li>
  <li>To find the rectangle with the largest area we have to calculate the area of each rectangle which has height <code class="language-plaintext highlighter-rouge">h</code> . where, <code class="language-plaintext highlighter-rouge">h</code> is the height of an individual bar in the rectangle. Because , the largest rectangle will at least include one entire bar of the histogram.</li>
</ol>

<p>In order to find the area of a bar with <code class="language-plaintext highlighter-rouge">h</code> height we have to find how many bars on both sides have a height greater than its own.Because , then we can stretch the rectangle including part of the other bars with height greater than <code class="language-plaintext highlighter-rouge">h</code>.This can be considered as its range or width.</p>

<p>In order to find this range we can keep traversing to each side until we find a bar with a height less than the current bars height for each bar.</p>

<p>This brute force method of checking <code class="language-plaintext highlighter-rouge">n</code> bars of histogram has a time complexity of <strong>O(n<sup>2</sup>)</strong> which is too slow.</p>

<p>In order to improve the time complexity we can use a <strong>stack</strong> to keep track of elements in an ordered way.</p>

<p>In order to find the range to the left we will follow these below algorithmic steps for each index starting from <code class="language-plaintext highlighter-rouge">0 to n-1</code>:</p>

<ol>
  <li>while height of bar the bar with index at the top of the stack is less than the height of bar with current index remove the top element of stack.</li>
  <li>If the stack is empty the range to the left for current index is 0, else its equal to the top element of stack + 1 .</li>
</ol>

<p>letâ€™s visualize this process for the input:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
6
2 1 4 5 1 7 3
</code></pre></div></div>
<p><strong>Visualization :</strong></p>

<p><img src="animation2.gif" alt="example" /></p>

<p>In order to find the range to the right we will follow similar algorithmic steps. However we move from <code class="language-plaintext highlighter-rouge">n-1 to 0</code>.</p>

<p>Once we have left and right index we can calculate ,</p>
<ul>
  <li>range = right index - left index + 1.</li>
  <li>Area = range * height .</li>
</ul>

<p>Afterwards, by calculating and comparing the area for each bar we can easily find the area of the largest rectangle in the histogram.</p>

<p><strong><em>NOTE :</em></strong> Itâ€™s highly recommended to watch the the first video provided in the resources section below. This is a very classic problem and to understand it fully, itâ€™s important to see the step by step processes visually. Also read the last blog in the resources section to know a slightly different coding process.</p>

<p><strong>Resources :</strong></p>

<ol>
  <li><a href="https://youtu.be/vcv3REtIvEo">Video Tutorial for finding the largest rectangle in a histogram</a></li>
  <li><a href="https://www.geeksforgeeks.org/stack-in-cpp-stl/">Stack STL details</a></li>
  <li><a href="https://youtu.be/L3ud3rXpIxA">Stack Basics (video intro)</a></li>
  <li><a href="https://youtu.be/RAMqDLI6_1c">Stack (video on implementation)</a></li>
  <li><a href="https://www.geeksforgeeks.org/largest-rectangle-under-histogram/">Slightly different way to code the solution</a></li>
</ol>

<h3 id="solution-code-in-c-">Solution Code in C++ :</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">t</span><span class="p">,</span><span class="n">cas</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>

        <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">histogram_height</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="p">{};</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">histogram_height</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="n">stack</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">index</span><span class="p">;</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">left</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="p">{},</span><span class="n">right</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span> <span class="p">{};</span>
        <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">max_area</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

        <span class="c1">//loop for finding the range to the left for each bar in histogram, or how far to the left can each bar be extended .</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//loop for emptying the stack and always keeping it in increasing order    </span>
            <span class="k">while</span><span class="p">(</span> <span class="o">!</span><span class="n">index</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">histogram_height</span><span class="p">[</span><span class="n">index</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&gt;=</span> <span class="n">histogram_height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                    <span class="n">index</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                <span class="k">else</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="n">top</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">index</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">//for emptying the stack before using it to find the range to right.</span>
        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">index</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">index</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">//loop for finding the range to right for each bar in histogram</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="k">while</span><span class="p">(</span> <span class="o">!</span><span class="n">index</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">histogram_height</span><span class="p">[</span><span class="n">index</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&gt;=</span> <span class="n">histogram_height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                    <span class="n">index</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                <span class="k">else</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span><span class="p">(</span><span class="n">index</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">right</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">right</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="n">top</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">index</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">//loop for calculating the maximum area each bar can cover after extending both ways.</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">long</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">current_area</span> <span class="o">=</span><span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">left</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">histogram_height</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

                <span class="n">max_area</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">max_area</span><span class="p">,</span><span class="n">current_area</span><span class="p">);</span>
            <span class="p">}</span>

        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Case "</span><span class="o">&lt;&lt;++</span><span class="n">cas</span><span class="o">&lt;&lt;</span><span class="s">": "</span><span class="o">&lt;&lt;</span><span class="n">max_area</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET